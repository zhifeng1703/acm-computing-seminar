#+title: MAT5939-03 ACM Computing Seminar â€“ Fall 2017
#+name: Zhifeng Deng
#+options: html-postamble:nil toc:nil name:nil
#+options: H:3 num:0
#+options: with-fixed-width:yes
#+html_head: <link rel="stylesheet" type="text/css" href="css/main.css">
#+html: <div id="main">
#+html_mathjax: path:"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=Tex-AMS-MML_HTMLorMML"

* Course Information [[./syllabus.html][(syllabus)]]
| *Time & Place:* | Monday 18:45-20:00, LOV 102              |
| *Instructor:*   | Zhifeng Deng                             |
| *Office Hours:* | Tues/Thurs 12:00-13:30 or by appointment |
| *Email:*        | [[mailto:zdeng@math.fsu.edu?subject=MAT5939 ... ][zdeng@math.fsu.edu]]                       |
* Resources
** Programming Language Guides
+ [[./resources/langs/cpp/][C++ guide]] ([[./resources/langs/cpp/index.pdf][pdf]])
+ [[./resources/langs/fortran/][Fortran guide]] ([[./resources/langs/fortran/index.pdf][pdf]])
** Programming assignment resources
+ [[./resources/prog/assignment-template.zip][Programming assignment template]] (Read the README!)
+ [[./resources/prog/example-assignment.zip][Example programming assignment and solution]]
** Programming environment setup
+ [[./Linux.txt][Setup Windows Subsystem for Linux]]
Useful links: [[https://solarianprogrammer.com/2017/04/15/install-wsl-windows-subsystem-for-linux][Setup Subsystem]], [[https://solarianprogrammer.com/2017/04/16/windows-susbsystem-for-linux-xfce-4][Setup GUI]]
* Assignments

|-----------------------+----------------------------------------------------------------|
| Week                  | Assignment                                                     |
| <c>                   |                                                                |
|-----------------------+----------------------------------------------------------------|
| 1 <2017-08-28 Mon>    | 1. Read the Programming assignment resources carefully.        |
|                       |                                                                |
|                       | 2. Install g++ or other compiler you prefer,                   |
|                       | create and compile helloworld.cpp.                             |
|                       |                                                                |
|-----------------------+----------------------------------------------------------------|
| 2 <2017-09-18 Mon>    | Compute the value of the truncated sum,                        |
|                       | $s_N = \sum_{n=1}^N \frac{1}{n^2}$                             |
|                       | and the absolute error,                                        |
|                       | $e_N = \vert{}\frac{\pi^2}{6} - s_N\vert{}$                    |
|                       | while $e_N > 10^{-4}$. For each iteration, print               |
|                       | $N$, $e_N$                                                     |
|                       | if $N$ is a mutiple of $100$.                                  |
|-----------------------+----------------------------------------------------------------|
| 3 <2017-09-25 Mon>    | Consider the function $$f(x)=3x^2-x^3$$ on $0\leq x \leq 3$.   |
|                       | Write functions to generate different uniform grid points and  |
|                       | approximate the definite integral using [[https://en.wikipedia.org/wiki/Trapezoidal_rule][trapezoidal rule]].      |
|                       | For each grid, output the stepsize $h$ and the absolute error. |
|                       | Verify that error has second order of convergence with respect |
|                       | to $h$, i.e. $error \sim h^2$.                                 |
|                       |                                                                |
|                       | The file [[./resources/data/x.txt][x.txt]] contains a nonuniform grid. Write               |
|                       | functions to read the file and approximate the intergal again. |
|                       | Compare this result to the uniform grid. Does it still fit the |
|                       | pattern? Is it still bounded?                                  |
|                       |                                                                |
|                       | Note: 1. Error in trapezodial rule has the bound of the form:  |
|                       | $$\frac{(b-a)^3 \vert{}f''(\xi)\vert{}}{(12 N^2)} $$           |
|                       | 2. For nonuniform grid, you could consider                     |
|                       | $$h=\max\limits_i \{\Delta x_i\}$$                             |
|-----------------------+----------------------------------------------------------------|
| None <2017-10-02 Mon> | Not a particular assignment for the seminar this week. You can |
|                       | warp your pervious trapezodial rule code into a function and   |
|                       | maybe into a header file. No report or source code is needed.  |
|                       | When you are doing the FCM program, use function.              |
|-----------------------+----------------------------------------------------------------|
| 4 <2017-10-09 Mon>    | Add a member function, =norm=, to the vector class             |
|                       | discussed in the C++ guide. The function should                |
|                       | have the signature:                                            |
|                       |                                                                |
|                       | ~double norm(double p);~                                       |
|                       |                                                                |
|                       | and should implement the [[https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm][vector p-norm]]. The function           |
|                       | would be then called like:                                     |
|                       |                                                                |
|                       | ~x.norm(1.53);~                                                |
|                       |                                                                |
|                       | where ~x~ is a vector object. Write a test script              |
|                       | that loops through values of ~p=1, 1.1, ..., 1.9, 2~           |
|                       | and for each value of ~p~, prints the average p-norm           |
|                       | of 100 vectors of length 10 whose components are               |
|                       | uniform random on [0,1] (see the C++ guide section             |
|                       | on generating random numbers).                                 |
|                       |                                                                |
|                       | No report is needed for this assignment, just send             |
|                       | me your code and result via email or show me in class.         |
|-----------------------+----------------------------------------------------------------|
| 5 <2017-10-17 Tue>    | Overload the binary operator ~==~ to implement the comparison  |
|                       | for your vector class. Two vectors are consider the same if    |
|                       | the two norm of their difference is less than $10^{-10}$.      |
|-----------------------+----------------------------------------------------------------|

* Anouncements

|------------------+--------------------------------------------------------------|
| Date             | Announcement                                                 |
|------------------+--------------------------------------------------------------|
| <2017-08-31 Thu> | Stop by my office during my office hour or by appointment.   |
|                  | We will have a short conversation about the code you have    |
|                  | done before.                                                 |
|                  |                                                              |
|------------------+--------------------------------------------------------------|
| <2017-09-05 Tue> | I will hold my office hour at MCH 404/6B today and later on. |
|                  |                                                              |
|------------------+--------------------------------------------------------------|
| <2017-09-25 Mon> | The file ~x.txt~ in assignment 3 is fixed. For the reading   |
|                  | data parts in assignment 3, you can read the data and count  |
|                  | the numbers of elements. Then, create a dynamic array and    |
|                  | read it again. Or you could use =vector= and take advantage  |
|                  | of [[http://www.cplusplus.com/reference/vector/vector/push_back/][=vector::push_back=]]                                       |
|                  |                                                              |
|------------------+--------------------------------------------------------------|


#+html: </div>



