#+title: MAT5939-03 ACM Computing Seminar â€“ Fall 2018
#+name: Zhifeng Deng
#+options: html-postamble:nil toc:nil name:nil
#+options: H:3 num:0
#+options: with-fixed-width:yes
#+html_head: <link rel="stylesheet" type="text/css" href="css/main.css">
#+html: <div id="main">
#+html_mathjax: path:"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=Tex-AMS-MML_HTMLorMML"

* Course Information [[./syllabus.html][(syllabus)]]
| *Time & Place:* | Monday 18:45-20:00, LOV 102              |
| *Instructor:*   | Zhifeng Deng                             |
| *Office Hours:* | Tues/Thurs 10:30-12:00 or by appointment |
| *Email:*        | [[mailto:zdeng@math.fsu.edu?subject=MAT5939 ... ][zdeng@math.fsu.edu]]                       |
* Resources
** Programming Language Guides
+ [[./resources/langs/cpp/][C++ guide]] ([[./resources/langs/cpp/index.pdf][pdf]])
+ [[./resources/langs/fortran/][Fortran guide]] ([[./resources/langs/fortran/index.pdf][pdf]])
** Programming assignment resources
+ [[./resources/prog/assignment-template.zip][Programming assignment template]] (Read the README!)
+ [[./resources/prog/example-assignment.zip][Example programming assignment and solution]]
** Programming environment setup
+ [[./Linux.txt][Setup Windows Subsystem for Linux]]
Useful links: [[https://solarianprogrammer.com/2017/04/15/install-wsl-windows-subsystem-for-linux][Setup Subsystem]], [[https://solarianprogrammer.com/2017/04/16/windows-susbsystem-for-linux-xfce-4][Setup GUI]]
* Assignments

|--------------------+--------------------------------------------------------------------------------------|
| Week               | Assignment                                                                           |
| <c>                |                                                                                      |
|--------------------+--------------------------------------------------------------------------------------|
| 1 <2018-08-27 Mon> | 1. Read the Programming assignment resources carefully.                              |
|                    |                                                                                      |
|                    | 2. Install g++ or other compiler you prefer, create and compile helloworld.cpp.      |
|--------------------+--------------------------------------------------------------------------------------|
| 3 <2018-09-10 Mon> | [[https://en.wikipedia.org/wiki/Basel_problem][Basel problem]]                                                                        |
|                    | IMPORTANT: Do $S_N$ in single precision and $\frac{\pi^2}{6}$ in double precision.   |
| Assignment 1       | So that you have your $R_N = \frac{\pi^2}{6}-double(S_N)$ in double precision.       |
|                    |                                                                                      |
|                    | Basel problem asks for the precise summation of the infinite series:                 |
|                    | $$\sum\limits_{n=1}^{\infty}\frac{1}{n^2}$$                                          |
|                    | The answer is known as $\frac{\pi^2}{6}$                                             |
|                    |                                                                                      |
|                    | Now, consider the truncated sum                                                      |
|                    | $$S_N=\sum\limits_{n=1}^{N} \frac{1}{n^2}$$                                          |
|                    | and the remainder term $R_N=\frac{\pi^2}{6}-S_N$. Derive a bound for $R_N$ of $N$    |
|                    |                                                                                      |
|                    | Write a code to compute $S_N,R_N$ with given $N$. Then pick 5 proper $N$ and run     |
|                    | it. Collect your result and do a logplot with $(N,R_N)$. Make comments on the        |
|                    | bound you derived and the result from your code:                                     |
|                    |                                                                                      |
|                    | Is it a tight bound?                                                                 |
|                    | Any comment on the order of the bound(power of $N$)?                                 |
|                    |                                                                                      |
|                    | Note: Feel free to use more than 5 $N$ if you can. For example, if you are           |
|                    | familiar with output to file process, you may run your code iteratively and output   |
|                    | all results to a file.                                                               |
|                    |                                                                                      |
|                    | You may use any software for plotting.                                               |
|                    |                                                                                      |
|                    | You may also plot your bound on the figure for illustration.                         |
|--------------------+--------------------------------------------------------------------------------------|
| 4 <2018-09-17 Mon> | Follower problem                                                                     |
|                    |                                                                                      |
| Assignment 2       | In social networking sites like Facebook, users with follower relationship creates   |
|                    | a complicated oriented graph structure. Let $B\to A$ denotes $B$ follows $A$,        |
|                    | and suppose $C\to B$, $B\to A$, we call $C$ a sub-follower of $A$.                   |
|                    |                                                                                      |
|                    | Given all follower relationship of $N$ users in [[./resources/data/follower.txt][follower.txt]], write a code to        |
|                    | accomplish 2 tasks:                                                                  |
|                    |                                                                                      |
|                    | 1. Determined if a user $B$ is a follower or sub-follower (no need to distinguish),  |
|                    | of a user $A$.                                                                       |
|                    | 2. For a given number $M$, counted how many users have followers and sub-followers   |
|                    | more than $M$.                                                                       |
|                    |                                                                                      |
|                    | These tasks should be done in function. You may store whole follower network and     |
|                    | work with raw data provide in the data. A better approach would be create your       |
|                    | own data structure storing the information you need for the tasks, some kind of      |
|                    | preprocessing of the raw data. Feel free to create your structure via =class=.       |
|                    |                                                                                      |
|                    | Data format:                                                                         |
|                    | The first integer represents the number of all users $N$. The following numbers      |
|                    | pair $A B$ represents user $A$ have followed $B$, $A\to B$. Example:                 |
|                    |                                                                                      |
|                    | 3 1 2 2 1 2 3                                                                        |
|                    |                                                                                      |
|                    | This example means there are 3 users in total, user #1 and #2 follow each other      |
|                    | and user #2 have followed user #3                                                    |
|--------------------+--------------------------------------------------------------------------------------|
| <2018-09-24 Mon>   | Duplicate the matrix class in the guide, add one more function =print= to it.        |
|                    |                                                                                      |
| Assignment 3       | this =print= will output the matrix to a file. You may open the file outside or      |
|                    | inside the function. In other words, for Fortran, you may open the file outside and  |
|                    | pass the unit number of your file to the function or you may open the file inside    |
|                    | the function and close it when you exit, for C++, you may create the buffer          |
|                    | zone =ofstream= outside and pass the reference or you may create the buffer zone     |
|                    | inside the function. In practice open the file outside will be better.               |
|                    |                                                                                      |
|--------------------+--------------------------------------------------------------------------------------|
| <2018-10-15 Mon>   | Integrate the matrix class in the guide to a header file and an implementation file. |
|                    | Call your =print= function in your main funcion by loading this header file.         |
| Assignment 4       |                                                                                      |
|--------------------+--------------------------------------------------------------------------------------|

|-----------+-----------------------------------------------------------------------------------------------|
| <c>       |                                                                                               |
|-----------+-----------------------------------------------------------------------------------------------|
| Program 1 | [[https://en.wikipedia.org/wiki/Binary_serach_tree][Binary Serach Tree]]:                                                                           |
|           |                                                                                               |
|           | Implement a binary serach tree class with following feature:                                  |
|           |                                                                                               |
|           | 1, Insert data (node) to an existing tree. Note that this tree are in general not balanced.   |
|           | 2, Print out the tree by levels. Level $k$ has at most $2^{k-1}$ nodes. Print out the tree    |
|           | by levels. Use * to represented null node.                                                    |
|           |                                                                                               |
|           | Then for some series, insert the data to an empty tree in given order and print the final     |
|           | tree. For example, for data $\{4,2,3,8,5,6\}$, the print out would be                         |
|           | 4                                                                                             |
|           | 2 8                                                                                           |
|           | * 3 5 *                                                                                       |
|           | * * * * * 6 * *                                                                               |
|-----------+-----------------------------------------------------------------------------------------------|
| Program 2 | [[https://en.wikipedia.org/wiki/Markov_chain][Markov Chain]]:                                                                                 |
|           |                                                                                               |
|           | Markov Chain can be described by a transition matrix $P$. The $n$-th state $x(n)$ of an input |
|           | vector $x(0)$ is given by                                                                     |
|           | \[x(n)=x(0)P^n\]                                                                              |
|           |                                                                                               |
|           | Implement an efficient method to compute the $x(n)$ with given $P$ and $x(0)$. Analyze the    |
|           | efficiency with resepct to $n$, compare with the worst method you can come up with.           |
|           |                                                                                               |
|           | Generate a random $P$ and $x(0)$, run your code for different $n$ and time your method with   |
|           | the worst method. Check if the result is consistant with your analysis.                       |
|           |                                                                                               |
|-----------+-----------------------------------------------------------------------------------------------|




* Anouncements

|------------------+---------------------------------------------------------------------------------------|
| Date             | Announcement                                                                          |
|------------------+---------------------------------------------------------------------------------------|
| <2018-09-20 Thu> | The link to [[./resources/data/follower.txt][follower.txt]] has been fixed. The file contains 100 vertices and 500 edges |
|------------------+---------------------------------------------------------------------------------------|
| <2018-09-24 Mon> | A solution to Basel problem has been release. [[./resources/BaselProblem.zip][BaselProblem.zip]]                        |
|------------------+---------------------------------------------------------------------------------------|
| <2018-10-15 Mon> | 1. Assignments: here is the what you are expected to turn in:                         |
|                  |                                                                                       |
|                  | Assignment 1: a complete report with source code.                                     |
|                  | Assignment 2: your source code with some results, some txt file recording how many    |
|                  | users have $M$ follower and sub follower for a few $M$ is enough.                     |
|                  | Assignment 3 and 4: your source code with the header file and implementation file.    |
|                  |                                                                                       |
|                  | Program 1: Your source code with a result, a file print out the binary tree for some  |
|                  | input is enough.                                                                      |
|                  | Program 2: Your source code with the analysis on complexity. Compare your method's    |
|                  | efficiency with the worst method you can come up with. (short report needed)          |
|------------------+---------------------------------------------------------------------------------------|


#+html: </div>



